########### Pthread ########################

pthread_create [Thread creation]
	pthread_create.c     : Create a thread
	pthread_create_arg.c : Create a thread and pass the argument as string
	pthread_create_int.c : Create a thread and pass the integer

multithread  [Multi thread creation]
	multithread_create.c   : How to create a multithread
	multithread_run_md1.c  : How to run multithread parraly (method 1)
	multithread_run_md2.c  : How to run multithread parraly (method 1)
	
mutex :
	A mutex is provides a mutual exclution.
	In multi-thread programming, two or more thread do not simultaneously 
	execute some particular program segment known as critical section.
	If two or more threads acess the critical section at the same time, the critical section
	will be corrupted. We can avoid this problem using sychrization method.

	When one thread starts executing the critical section the other thread should wait until 
	he first thread finishes.

	method_1.c : 	
		Create 5 differnet pthread with same thread_function_name and all of the 5
		thread's tries to access the common resource at the same time.
		Avoided the common resource corruption using mutex.
	method_2.c : 	
		Create 5 differnet pthread with different thread_function_name and all of
		the 5 thread's tries to access the common resource at the same time.
		Avoided the common resource corruption using mutex.

pthread_barrier:
	A barrier is a point where the thread is going to wait for other threads and 
	will proceed further only, when predefined number of threads reach the same barrier 
	in their respective programs. 

	barrier.c : 1) Create  4 threads and all the threads are going to initalize the global variable.
		    2) This global variable is used in all the threads
		    3) So all the threads need to wait to complete global varibale initialization
		    4) We can do this using barrier sychronization
        Procedure to run the code.
		<./barrier> //It will ask the user to ender the global variable input.
			      Once user has entered all 4 global variable input.
			      All the threads going to proceed further
semaphore:
	Semaphore is used to syncronize the process.
	There are two types of semaphore
	1. Binary Semaphore [ 0 or 1 ]
	2. Counting Semaphore

binary_semaphore:
	It is a special form of semaphore used for implementing mutual exclusion,
	hence it is often called Mutex.
	A binary semaphore is initialized to 1 and only takes the value 0 and 1 
	during execution of a program.

	binary_semaphore.c  : Shows that how to use binary semaphore



















