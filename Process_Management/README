################################ Process Management ###################################

Create a new process
--------------------
create_new_process
	fork.c  : Create a new process using fork()
	vfork.c : Create a new process using vfork()

	clone : Create a new process using clone()
		clone_1.c : Create a new process as vfork
		clone_2.c : Create a new process as thread
			    Parent and Child run concurrently (thread)
______________________________________________________________________________________________
daemon_process
---------------
	daemon.c : Create a daemon process and run it in background
	
	Approach:
	1) Create a process using fork
	2) Start a new section for child process
	3) Run the child process as daemon
  	
	Procedure to validate a daemon process
	*) Run daemon.c (./daemon)
	*) It will create a file ('daemon.txt') and  
	*) write it as a 'Daemon process....' into 'daemon.txt' for every sec in the background
	*) To validate the ouput
		'cat daemon.txt' 

	*)To stop the daemon process
		ps -ef | grep daemon
		kill -9 <pid_of_daemon>
____________________________________________________________________________________________

process_id
----------
	process_id.c : Print the lsit of process id's
____________________________________________________________________________________________

wait, waitpid - wait for process to change state
------------------------------------------------
System call
----------
	pid_t wait(int *status); 
	pid_t waitpid(pid_t pid, int *status, int options); 
	int waitid(idtype_t idtype, id_t id, siginfo_t * infop , int options );

	wait.c     : Progam to Parent to wait for child to complete its execution
	zombie.c   : Progrm for zombie [ Child enters into Zombie state]
	waitpid.c  : 
___________________________________________________________________________________________
Exe Family
-----------
       Each system call (exec) is the word exec followed by either l or v and then possibly 
followed by either e or p.
       int execl ( const char *path, const char *arg, ... );
       int execlp( const char *file, const char *arg, ... );
       int execle( const char *path, const char *arg, ..., char *const envp[] );
       int execv ( const char *path, char *const argv[] );
       int execvp( const char *file, char *const argv[] );
       int execve( const char *file, char *const argv[], char *const envp[] );
__________________________________________________________________________________________


	

