################################ Process Management ###################################

Create a new process
--------------------
create_new_process
	fork.c  : Create a new process using fork()
	vfork.c : Create a new process using vfork()

	clone : Create a new process using clone()
		clone_1.c : Create a new process as vfork
		clone_2.c : Create a new process as thread
			    Parent and Child run concurrently (thread)
______________________________________________________________________________________________
daemon_process
---------------
	daemon.c : Create a daemon process and run it in background
	
	Approach:
	1) Create a process using fork
	2) Start a new section for child process
	3) Run the child process as daemon
  	
	Procedure to validate a daemon process
	*) Run daemon.c (./daemon)
	*) It will create a file ('daemon.txt') and  
	*) write it as a 'Daemon process....' into 'daemon.txt' for every sec in the background
	*) To validate the ouput
		'cat daemon.txt' 

	*)To stop the daemon process
		ps -ef | grep daemon
		kill -9 <pid_of_daemon>
____________________________________________________________________________________________

process_id
----------
	process_id.c : Print the lsit of process id's
____________________________________________________________________________________________

wait, waitpid - wait for process to change state
------------------------------------------------
System call
----------
	pid_t wait(int *status); 
	pid_t waitpid(pid_t pid, int *status, int options); 
	int waitid(idtype_t idtype, id_t id, siginfo_t * infop , int options );

	wait.c     : Progam to Parent to wait for child to complete its execution
		     using wait()
	zombie.c   : Progrm for zombie [ Child enters into Zombie state]
	waitpid.c  : Progam to Parent to wait for child to complete its execution
		     using waitpid()
___________________________________________________________________________________________
Exe Family :
-----------
	*) Exec family of functions replaces the current program with a new program.
	*) The exec() call replaces the entire current contents of the process with a new program.
	   It loads the program into the current process space and runs it from the entry point.
        *) Each system call (exec) is the word exec followed by either l or v and then possibly 
           followed by either e or p.

	-----------------------------------
	|    |    - 	|   e	 |   p	  |
	-----------------------------------
	| l  |	execl 	| execle | execlp |
	-----------------------------------
	| v  |	execv 	| execve | execvp |
	-----------------------------------

System Call
***********
	int execl ( const char *path, const char *arg, ... );
	int execlp( const char *file, const char *arg, ... );
	int execle( const char *path, const char *arg, ..., char *const envp[] );

	int execv ( const char *path, char *const argv[] );
	int execvp( const char *file, char *const argv[] );
	int execvpe( const char *file, char *const argv[], char *const envp[] );

	Functions in the exec() family have different behaviours:

	l : command-line arguments are passed as a list of strings to the main()
	v : command-line arguments are passed as an array of strings to the main()
	p : Uses the PATH environment variable to find the file named in the path argument to
	be executed.
	e : An array of pointers to environment variables is explicitly passed to the new
	process image.

Program :
---------
	execl.c   : execl()   sample code
	execlp.c  : execlp()  sample code
	execle.c  : execle()  sample code

	execv.c   : execv()   sample code
	execvp.c  : execvp()  sample code
	execvpe.c : execvpe() sample code

	exe_family.c : package of all the exec family

	cmd_line  : Binary to print the command line arguments
 _________________________________________________________________________________________________


	

